# Generated by Django 5.2.3 on 2025-07-01 07:13

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AlertType',
            fields=[
                ('alert_type_id', models.AutoField(primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'db_table': 'alert_types',
            },
        ),
        migrations.CreateModel(
            name='Builder',
            fields=[
                ('builder_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'db_table': 'builders',
            },
        ),
        migrations.CreateModel(
            name='BulkMessageType',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('bulk_message_type_id', models.AutoField(primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'bulk_message_type',
            },
        ),
        migrations.CreateModel(
            name='Circuit',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('circuit_id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('address', models.TextField(blank=True, null=True)),
                ('city', models.CharField(blank=True, max_length=255, null=True)),
                ('zip_code', models.CharField(blank=True, max_length=10, null=True)),
                ('circuit_id_a', models.CharField(blank=True, max_length=255, null=True)),
                ('circuit_id_z', models.CharField(blank=True, max_length=255, null=True)),
                ('contact_number', models.CharField(blank=True, max_length=20, null=True)),
                ('activation_date', models.DateField(blank=True, null=True)),
                ('mbps_speed', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('facility_assignment', models.CharField(blank=True, max_length=255, null=True)),
                ('media_type', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'circuits',
            },
        ),
        migrations.CreateModel(
            name='CircuitCarrier',
            fields=[
                ('circuit_carrier_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'db_table': 'circuit_carriers',
            },
        ),
        migrations.CreateModel(
            name='CPEControlLogType',
            fields=[
                ('cpe_control_log_type_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'cpe_control_log_types',
            },
        ),
        migrations.CreateModel(
            name='DispatchAppointmentTimeslot',
            fields=[
                ('dispatch_appointment_timeslot_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'dispatch_appointment_timeslots',
            },
        ),
        migrations.CreateModel(
            name='DispatchAppointmentType',
            fields=[
                ('dispatch_appointment_type_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'dispatch_appointment_types',
            },
        ),
        migrations.CreateModel(
            name='LeasingStaffRed',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('leasing_staff_red_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('active', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'leasing_staff_red',
            },
        ),
        migrations.CreateModel(
            name='MacAddress',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('mac_address_id', models.AutoField(primary_key=True, serialize=False)),
                ('address', models.CharField(max_length=17, unique=True)),
                ('cpe_id', models.CharField(blank=True, max_length=100, null=True)),
                ('cpe_serial_number', models.CharField(blank=True, max_length=100, null=True)),
                ('firmware_update', models.BooleanField(default=False)),
                ('firmware_update_manual', models.BooleanField(default=False)),
                ('manual_registration', models.BooleanField(default=False)),
                ('default_ssid', models.CharField(blank=True, max_length=255, null=True)),
                ('default_passkey', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'mac_address',
            },
        ),
        migrations.CreateModel(
            name='MacAddressLookup',
            fields=[
                ('mac_address_lookup_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'mac_address_lookup',
            },
        ),
        migrations.CreateModel(
            name='Node',
            fields=[
                ('node_id', models.AutoField(primary_key=True, serialize=False)),
                ('hostname', models.CharField(max_length=255)),
                ('ip_address', models.GenericIPAddressField()),
                ('mac_address', models.CharField(max_length=17)),
                ('serial_number', models.CharField(blank=True, max_length=100, null=True)),
                ('dns_ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'nodes',
            },
        ),
        migrations.CreateModel(
            name='NodeClass',
            fields=[
                ('node_class_id', models.AutoField(primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'node_class',
            },
        ),
        migrations.CreateModel(
            name='NodeFrame',
            fields=[
                ('node_frame_id', models.AutoField(primary_key=True, serialize=False)),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'node_frames',
            },
        ),
        migrations.CreateModel(
            name='NodeType',
            fields=[
                ('node_type_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'db_table': 'node_types',
            },
        ),
        migrations.CreateModel(
            name='OntManufacturer',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ont_manufacturer_id', models.AutoField(primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'ont_manufacturer',
            },
        ),
        migrations.CreateModel(
            name='Outage',
            fields=[
                ('outage_id', models.AutoField(primary_key=True, serialize=False)),
                ('resolved', models.BooleanField(default=False)),
                ('email_notices_sent', models.BooleanField(default=False)),
                ('phone_notices_sent', models.BooleanField(default=False)),
                ('phone_message_updated', models.BooleanField(default=False)),
                ('confirmed', models.BooleanField(default=False)),
                ('confirmed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'outages',
            },
        ),
        migrations.CreateModel(
            name='ProjectNetworkType',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('project_network_type_id', models.AutoField(primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'db_table': 'project_network_type',
            },
        ),
        migrations.CreateModel(
            name='QBOToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('access_token', models.TextField()),
                ('refresh_token', models.TextField()),
                ('expires_in', models.IntegerField()),
                ('token_type', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'qbo_tokens',
            },
        ),
        migrations.CreateModel(
            name='ReportType',
            fields=[
                ('report_type_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'report_types',
            },
        ),
        migrations.CreateModel(
            name='ServiceChangeScheduleType',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('service_change_schedule_type_id', models.AutoField(primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'db_table': 'service_change_schedule_type',
            },
        ),
        migrations.CreateModel(
            name='ServicePlan',
            fields=[
                ('service_plan_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'db_table': 'service_plans',
            },
        ),
        migrations.CreateModel(
            name='Statement',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('statement_id', models.AutoField(primary_key=True, serialize=False)),
                ('due_date', models.DateField()),
                ('archived', models.BooleanField(default=False)),
                ('initial_statement', models.BooleanField(default=False)),
                ('final_statement', models.BooleanField(default=False)),
                ('amount_past_due', models.DecimalField(decimal_places=2, max_digits=10)),
                ('qbo_invoice_id', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'statements',
                'ordering': ['-due_date'],
            },
        ),
        migrations.CreateModel(
            name='StatementItemDescription',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('statement_item_description_id', models.AutoField(primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'statement_item_descriptions',
            },
        ),
        migrations.CreateModel(
            name='StatementItemType',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('statement_item_type_id', models.AutoField(primary_key=True, serialize=False)),
                ('description', models.TextField()),
            ],
            options={
                'db_table': 'statement_item_types',
            },
        ),
        migrations.CreateModel(
            name='SubscriptionType',
            fields=[
                ('subscription_type_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'subscription_types',
            },
        ),
        migrations.CreateModel(
            name='TicketCategory',
            fields=[
                ('ticket_category_id', models.AutoField(primary_key=True, serialize=False)),
                ('description', models.TextField()),
            ],
            options={
                'db_table': 'ticket_category',
            },
        ),
        migrations.CreateModel(
            name='TicketEntryActionType',
            fields=[
                ('ticket_entry_action_type_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'db_table': 'ticket_entry_action_types',
            },
        ),
        migrations.CreateModel(
            name='TicketStatus',
            fields=[
                ('ticket_status_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'db_table': 'ticket_status',
            },
        ),
        migrations.CreateModel(
            name='UploadType',
            fields=[
                ('upload_type_id', models.AutoField(primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'db_table': 'upload_types',
            },
        ),
        migrations.CreateModel(
            name='UserCompany',
            fields=[
                ('user_company_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'db_table': 'user_companies',
            },
        ),
        migrations.CreateModel(
            name='UserPermissionCategory',
            fields=[
                ('user_permission_category_id', models.AutoField(primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'db_table': 'user_permission_category',
            },
        ),
        migrations.CreateModel(
            name='UserRoles',
            fields=[
                ('user_role_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'user_roles',
            },
        ),
        migrations.CreateModel(
            name='UsState',
            fields=[
                ('us_state_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
            ],
            options={
                'db_table': 'us_states',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=255, verbose_name='full name')),
                ('email', models.EmailField(blank=True, max_length=254, unique=True, verbose_name='email address')),
                ('work_phone', models.CharField(blank=True, max_length=20, null=True)),
                ('cell_phone', models.CharField(blank=True, max_length=20, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('user_company', models.ForeignKey(blank=True, db_column='user_company_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='users', to='app.usercompany')),
                ('user_role', models.ForeignKey(blank=True, db_column='user_role_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='users', to='app.userroles')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'db_table': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='BulkEmailTemplate',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('outage_email_template_id', models.AutoField(primary_key=True, serialize=False)),
                ('description', models.TextField(blank=True, null=True)),
                ('subject', models.CharField(max_length=255)),
                ('body', models.TextField()),
                ('message_type', models.ForeignKey(blank=True, db_column='bulk_message_type_id', null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.bulkmessagetype')),
            ],
            options={
                'db_table': 'bulk_email_templates',
            },
        ),
        migrations.CreateModel(
            name='BulkPhoneTemplate',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('outage_phone_template_id', models.AutoField(primary_key=True, serialize=False)),
                ('description', models.TextField(blank=True, null=True)),
                ('body', models.TextField()),
                ('active', models.BooleanField(default=True)),
                ('message_type', models.ForeignKey(blank=True, db_column='bulk_message_type_id', null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.bulkmessagetype')),
            ],
            options={
                'db_table': 'bulk_phone_templates',
            },
        ),
        migrations.CreateModel(
            name='CircuitAlert',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('circuit_alert_id', models.AutoField(primary_key=True, serialize=False)),
                ('message', models.TextField()),
                ('active', models.BooleanField(default=True)),
                ('activated_by', models.ForeignKey(blank=True, db_column='activated_by', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='circuit_alerts_activated', to=settings.AUTH_USER_MODEL)),
                ('alert_type', models.ForeignKey(db_column='alert_type_id', on_delete=django.db.models.deletion.CASCADE, related_name='circuit_alerts', to='app.alerttype')),
                ('circuit', models.ForeignKey(db_column='circuit_id', on_delete=django.db.models.deletion.CASCADE, related_name='circuit_alerts', to='app.circuit')),
                ('deactivated_by', models.ForeignKey(blank=True, db_column='deactivated_by', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='circuit_alerts_deactivated', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, db_column='updated_by', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='circuit_alerts_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'circuit_alerts',
            },
        ),
        migrations.AddField(
            model_name='circuit',
            name='circuit_carrier',
            field=models.ForeignKey(db_column='circuit_carrier_id', on_delete=django.db.models.deletion.CASCADE, related_name='circuits', to='app.circuitcarrier'),
        ),
        migrations.CreateModel(
            name='CPEControlLog',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cpe_control_log_id', models.AutoField(primary_key=True, serialize=False)),
                ('canceled_by', models.ForeignKey(blank=True, db_column='canceled_by', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='canceled_cpe_control_logs', to=settings.AUTH_USER_MODEL)),
                ('user_id', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='cpe_control_logs', to=settings.AUTH_USER_MODEL)),
                ('log_type', models.ForeignKey(db_column='cpe_control_log_type_id', on_delete=django.db.models.deletion.CASCADE, to='app.cpecontrollogtype')),
            ],
            options={
                'db_table': 'cpe_control_log',
            },
        ),
        migrations.CreateModel(
            name='Home',
            fields=[
                ('home_id', models.AutoField(primary_key=True, serialize=False)),
                ('address', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=100)),
                ('zip_code', models.CharField(max_length=20)),
                ('unit', models.CharField(blank=True, max_length=50, null=True)),
                ('subsciber', models.CharField(blank=True, max_length=255, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('node_switch_unit', models.CharField(max_length=50)),
                ('node_switch_module', models.CharField(max_length=50)),
                ('node_port_num', models.CharField(max_length=50)),
                ('wiring_certified_on', models.DateTimeField(blank=True, null=True)),
                ('exclude_from_reports', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('wiring_certified_by', models.ForeignKey(db_column='wiring_certified_by', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('mac_address', models.OneToOneField(db_column='mac_address_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='home', to='app.macaddress')),
                ('node', models.OneToOneField(db_column='node_id', null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.node')),
            ],
            options={
                'db_table': 'homes',
            },
        ),
        migrations.CreateModel(
            name='HomeAlert',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('home_alert_id', models.AutoField(primary_key=True, serialize=False)),
                ('message', models.TextField()),
                ('active', models.BooleanField(default=True)),
                ('activated_by', models.ForeignKey(blank=True, db_column='activated_by', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='activated_home_alerts', to=settings.AUTH_USER_MODEL)),
                ('alert_type', models.ForeignKey(db_column='alert_type_id', on_delete=django.db.models.deletion.PROTECT, to='app.alerttype')),
                ('deactivated_by', models.ForeignKey(blank=True, db_column='deactivated_by', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deactivated_home_alerts', to=settings.AUTH_USER_MODEL)),
                ('home', models.ForeignKey(db_column='home_id', on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='app.home')),
                ('updated_by', models.ForeignKey(blank=True, db_column='updated_by', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_home_alerts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'home_alerts',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MeshCPEInstall',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('mesh_cpe_install_id', models.AutoField(primary_key=True, serialize=False)),
                ('address', models.CharField(max_length=17)),
                ('cpe_id', models.CharField(blank=True, max_length=100, null=True)),
                ('cpe_serial_number', models.CharField(blank=True, max_length=100, null=True)),
                ('home', models.ForeignKey(db_column='home_id', on_delete=django.db.models.deletion.CASCADE, related_name='mesh_installs', to='app.home')),
            ],
            options={
                'db_table': 'mesh_cpe_installs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='node',
            name='node_class',
            field=models.ForeignKey(db_column='node_class_id', on_delete=django.db.models.deletion.CASCADE, to='app.nodeclass'),
        ),
        migrations.AddField(
            model_name='node',
            name='node_frame',
            field=models.ForeignKey(db_column='node_frame_id', on_delete=django.db.models.deletion.CASCADE, to='app.nodeframe'),
        ),
        migrations.AddField(
            model_name='node',
            name='node_type',
            field=models.ForeignKey(db_column='node_type_id', on_delete=django.db.models.deletion.CASCADE, to='app.nodetype'),
        ),
        migrations.CreateModel(
            name='OltSnapshot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('olt_ip_address', models.GenericIPAddressField()),
                ('interface', models.CharField(max_length=100)),
                ('fsan', models.CharField(max_length=100)),
                ('ont_model', models.CharField(max_length=100)),
                ('ont_active_version', models.CharField(max_length=100)),
                ('ont_standby_version', models.CharField(max_length=100)),
                ('ont_rx_power', models.DecimalField(decimal_places=2, max_digits=5)),
                ('ont_tx_power', models.DecimalField(decimal_places=2, max_digits=5)),
                ('distance', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('node', models.ForeignKey(db_column='node_id', on_delete=django.db.models.deletion.CASCADE, to='app.node')),
            ],
            options={
                'db_table': 'olt_snapshot',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Ont',
            fields=[
                ('ont_id', models.AutoField(primary_key=True, serialize=False)),
                ('fsan', models.CharField(max_length=255)),
                ('mac_address', models.CharField(max_length=17)),
                ('serial_number', models.CharField(blank=True, max_length=100, null=True)),
                ('interface', models.CharField(blank=True, max_length=100, null=True)),
                ('model_id', models.CharField(blank=True, max_length=100, null=True)),
                ('ont_version', models.CharField(blank=True, max_length=100, null=True)),
                ('software_version', models.CharField(blank=True, max_length=100, null=True)),
                ('ont_rx_power', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('olt_rx_power', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('distance', models.IntegerField(blank=True, null=True)),
                ('last_pulled', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('home', models.OneToOneField(db_column='home_id', on_delete=django.db.models.deletion.CASCADE, to='app.home')),
                ('node', models.ForeignKey(db_column='node_id', on_delete=django.db.models.deletion.PROTECT, to='app.node')),
                ('manufacturer', models.ForeignKey(db_column='ont_manufacturer_id', on_delete=django.db.models.deletion.PROTECT, to='app.ontmanufacturer')),
            ],
            options={
                'db_table': 'ont',
            },
        ),
        migrations.CreateModel(
            name='EmailLogItem',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('email_log_item_id', models.AutoField(primary_key=True, serialize=False)),
                ('subject', models.CharField(max_length=255)),
                ('body', models.TextField()),
                ('bulk_message_type', models.ForeignKey(blank=True, db_column='bulk_message_type_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='email_log_items', to='app.bulkmessagetype')),
                ('outage', models.ForeignKey(blank=True, db_column='outage_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='email_log_items', to='app.outage')),
            ],
            options={
                'db_table': 'email_log_items',
            },
        ),
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('alert_id', models.AutoField(primary_key=True, serialize=False)),
                ('message', models.TextField(help_text='The content of the alert message.')),
                ('active', models.BooleanField(default=True, help_text='Indicates if the alert is currently active.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('activated_by', models.ForeignKey(blank=True, db_column='activated_by', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='activated_alerts', to=settings.AUTH_USER_MODEL)),
                ('deactivated_by', models.ForeignKey(blank=True, db_column='deactivated_by', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deactivated_alerts', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, db_column='updated_by', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_alerts', to=settings.AUTH_USER_MODEL)),
                ('alert_type', models.ForeignKey(db_column='alert_type_id', on_delete=django.db.models.deletion.PROTECT, to='app.alerttype')),
                ('outage', models.ForeignKey(blank=True, db_column='outage_id', null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.outage')),
            ],
            options={
                'db_table': 'alerts',
            },
        ),
        migrations.CreateModel(
            name='OutageHomesEffected',
            fields=[
                ('outage_homes_effected_id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('home', models.ForeignKey(db_column='home_id', on_delete=django.db.models.deletion.CASCADE, to='app.home')),
                ('outage', models.ForeignKey(db_column='outage_id', on_delete=django.db.models.deletion.CASCADE, to='app.outage')),
            ],
            options={
                'db_table': 'outage_homes_effected',
                'unique_together': {('outage', 'home')},
            },
        ),
        migrations.AddField(
            model_name='outage',
            name='effected_homes',
            field=models.ManyToManyField(related_name='outages', through='app.OutageHomesEffected', to='app.home'),
        ),
        migrations.CreateModel(
            name='PortMacAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('node_switch_unit', models.IntegerField()),
                ('node_switch_module', models.IntegerField()),
                ('mac_address', models.CharField(max_length=17)),
                ('node_port_vlanid', models.IntegerField(blank=True, null=True)),
                ('node_oper_status', models.CharField(blank=True, max_length=50, null=True)),
                ('node_admin_status', models.CharField(blank=True, max_length=50, null=True)),
                ('node_rate_up', models.CharField(blank=True, max_length=50, null=True)),
                ('node_rate_down', models.CharField(blank=True, max_length=50, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('node', models.ForeignKey(db_column='node_Id', on_delete=django.db.models.deletion.CASCADE, to='app.node')),
            ],
            options={
                'db_table': 'port_mac_address',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('project_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('address', models.TextField(blank=True, null=True)),
                ('city', models.CharField(blank=True, max_length=255, null=True)),
                ('zip_code', models.CharField(blank=True, max_length=10, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=8, max_digits=11, null=True)),
                ('latitude', models.DecimalField(blank=True, decimal_places=8, max_digits=10, null=True)),
                ('activation_date', models.DateField(blank=True, null=True)),
                ('active', models.BooleanField(default=True)),
                ('domain_name', models.CharField(blank=True, max_length=255, null=True)),
                ('free_month', models.BooleanField(default=False)),
                ('qbo_customer_id', models.CharField(blank=True, max_length=255, null=True)),
                ('rm_property_id', models.IntegerField(blank=True, null=True)),
                ('builder', models.ForeignKey(blank=True, db_column='builder_id', null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.builder')),
                ('circuit', models.ForeignKey(blank=True, db_column='circuit_id', null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.circuit')),
                ('service_plan', models.ForeignKey(blank=True, db_column='bulk_service_plan_id', null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.serviceplan')),
                ('subscription_type', models.ForeignKey(db_column='subscription_type_id', on_delete=django.db.models.deletion.PROTECT, to='app.subscriptiontype')),
                ('state', models.ForeignKey(db_column='state_id', on_delete=django.db.models.deletion.PROTECT, to='app.usstate')),
            ],
            options={
                'db_table': 'projects',
            },
        ),
        migrations.AddField(
            model_name='outage',
            name='project',
            field=models.ForeignKey(db_column='project_id', on_delete=django.db.models.deletion.CASCADE, to='app.project'),
        ),
        migrations.AddField(
            model_name='nodeframe',
            name='project',
            field=models.ForeignKey(db_column='project_id', on_delete=django.db.models.deletion.CASCADE, to='app.project'),
        ),
        migrations.AddField(
            model_name='node',
            name='project',
            field=models.ForeignKey(db_column='project_id', on_delete=django.db.models.deletion.CASCADE, to='app.project'),
        ),
        migrations.AddField(
            model_name='home',
            name='project',
            field=models.OneToOneField(db_column='project_id', null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.project'),
        ),
        migrations.CreateModel(
            name='DowntimeEvent',
            fields=[
                ('downtime_event_id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('outage', models.ForeignKey(db_column='outage_id', on_delete=django.db.models.deletion.CASCADE, to='app.outage')),
                ('project', models.ForeignKey(blank=True, db_column='project_id', null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.project')),
            ],
            options={
                'db_table': 'downtime_event',
            },
        ),
        migrations.CreateModel(
            name='ProjectAlert',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('project_alert_id', models.AutoField(primary_key=True, serialize=False)),
                ('message', models.TextField()),
                ('active', models.BooleanField(default=True)),
                ('activated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='activated_project_alerts', to=settings.AUTH_USER_MODEL)),
                ('alert_type', models.ForeignKey(db_column='alert_type_id', on_delete=django.db.models.deletion.PROTECT, to='app.alerttype')),
                ('deactivated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deactivated_project_alerts', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(db_column='project_id', on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='app.project')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_project_alerts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'project_alerts',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RateLimitLog',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('rate_limit_log_id', models.AutoField(primary_key=True, serialize=False)),
                ('success', models.BooleanField()),
                ('rate', models.CharField(max_length=255)),
                ('result', models.TextField()),
                ('home', models.ForeignKey(db_column='home_id', on_delete=django.db.models.deletion.CASCADE, to='app.home')),
            ],
            options={
                'db_table': 'rate_limit_log',
            },
        ),
        migrations.CreateModel(
            name='SavedReport',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('saved_report_id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('data', models.TextField()),
                ('report_type', models.ForeignKey(db_column='report_type_id', on_delete=django.db.models.deletion.CASCADE, related_name='saved_reports', to='app.reporttype')),
            ],
            options={
                'db_table': 'saved_reports',
            },
        ),
        migrations.CreateModel(
            name='SMSLogItem',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('sms_log_item_id', models.AutoField(primary_key=True, serialize=False)),
                ('body', models.TextField()),
                ('bulk_message_type', models.ForeignKey(blank=True, db_column='bulk_message_type_id', null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.bulkmessagetype')),
                ('outage', models.ForeignKey(blank=True, db_column='outage_id', null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.outage')),
            ],
            options={
                'db_table': 'sms_log_items',
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('payment_id', models.AutoField(primary_key=True, serialize=False)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('merchant_id', models.CharField(blank=True, max_length=255, null=True)),
                ('autopay_merchant_id', models.CharField(blank=True, max_length=255, null=True)),
                ('qbo_payment_id', models.IntegerField(blank=True, null=True)),
                ('statement', models.ForeignKey(db_column='statement_id', on_delete=django.db.models.deletion.CASCADE, to='app.statement')),
            ],
            options={
                'db_table': 'payments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StatementItem',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('statement_item_id', models.AutoField(primary_key=True, serialize=False)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('custom', models.TextField(blank=True, null=True)),
                ('payment', models.ForeignKey(blank=True, db_column='payment_id', null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.payment')),
                ('statement', models.ForeignKey(db_column='statement_id', on_delete=django.db.models.deletion.CASCADE, related_name='items', to='app.statement')),
                ('description', models.ForeignKey(db_column='statement_item_description_id', on_delete=django.db.models.deletion.PROTECT, to='app.statementitemdescription')),
            ],
            options={
                'db_table': 'statement_items',
            },
        ),
        migrations.AddField(
            model_name='statementitemdescription',
            name='type',
            field=models.ForeignKey(db_column='statement_item_type_id', on_delete=django.db.models.deletion.PROTECT, to='app.statementitemtype'),
        ),
        migrations.CreateModel(
            name='Subscriber',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('subscriber_id', models.AutoField(primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=255)),
                ('last_name', models.CharField(max_length=255)),
                ('primary_email', models.EmailField(max_length=254, unique=True)),
                ('username', models.CharField(max_length=255, unique=True)),
                ('password', models.CharField(max_length=255)),
                ('primary_phone', models.CharField(blank=True, max_length=20, null=True)),
                ('service_activated_on', models.DateTimeField(blank=True, null=True)),
                ('service_deactivated_on', models.DateTimeField(blank=True, null=True)),
                ('suspended', models.BooleanField(default=False)),
                ('merchant_customer_id', models.CharField(blank=True, max_length=255, null=True)),
                ('autopay_merchant_id', models.CharField(blank=True, max_length=255, null=True)),
                ('acp_application_id', models.CharField(blank=True, max_length=255, null=True)),
                ('qbo_customer_id', models.CharField(blank=True, max_length=255, null=True)),
                ('multi_home_subscriber', models.BooleanField(default=False)),
                ('pause_billing', models.BooleanField(default=False)),
                ('home', models.ForeignKey(db_column='home_id', on_delete=django.db.models.deletion.PROTECT, to='app.home')),
                ('node', models.ForeignKey(blank=True, db_column='node_id', null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.node')),
                ('service_plan', models.ForeignKey(db_column='service_plan_id', on_delete=django.db.models.deletion.PROTECT, to='app.serviceplan')),
            ],
            options={
                'db_table': 'subscribers',
            },
        ),
        migrations.AddField(
            model_name='statement',
            name='subscriber',
            field=models.ForeignKey(db_column='subscriber_id', on_delete=django.db.models.deletion.CASCADE, related_name='statements', to='app.subscriber'),
        ),
        migrations.AddField(
            model_name='payment',
            name='subscriber',
            field=models.ForeignKey(db_column='subscriber_id', on_delete=django.db.models.deletion.CASCADE, to='app.subscriber'),
        ),
        migrations.CreateModel(
            name='PasswordResetToken',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('password_reset_token_id', models.AutoField(primary_key=True, serialize=False)),
                ('token', models.CharField(max_length=255)),
                ('expires', models.DateTimeField()),
                ('subscriber', models.ForeignKey(db_column='subscriber_id', on_delete=django.db.models.deletion.CASCADE, to='app.subscriber')),
            ],
            options={
                'db_table': 'password_reset_tokens',
            },
        ),
        migrations.CreateModel(
            name='SubscriberAlert',
            fields=[
                ('subscriber_alert_id', models.AutoField(primary_key=True, serialize=False)),
                ('message', models.TextField()),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('activated_by', models.ForeignKey(blank=True, db_column='activated_by', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='activated_subscriber_alerts', to=settings.AUTH_USER_MODEL)),
                ('alert_type', models.ForeignKey(db_column='alert_type_id', on_delete=django.db.models.deletion.PROTECT, to='app.alerttype')),
                ('deactivated_by', models.ForeignKey(blank=True, db_column='deactivated_by', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deactivated_subscriber_alerts', to=settings.AUTH_USER_MODEL)),
                ('subscriber', models.ForeignKey(db_column='subscriber_id', on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='app.subscriber')),
                ('updated_by', models.ForeignKey(blank=True, db_column='updated_by', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_subscriber_alerts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'subscriber_alerts',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SubscriberEmailLog',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('subscriber_email_log_id', models.AutoField(primary_key=True, serialize=False)),
                ('sent_to', models.EmailField(max_length=254)),
                ('success', models.BooleanField()),
                ('item', models.ForeignKey(db_column='email_log_item_id', on_delete=django.db.models.deletion.CASCADE, to='app.emaillogitem')),
                ('subscriber', models.ForeignKey(db_column='subscriber_id', on_delete=django.db.models.deletion.CASCADE, to='app.subscriber')),
            ],
            options={
                'db_table': 'subscriber_email_log',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SubscriberPaymentMethod',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('subscriber_payment_method_id', models.AutoField(primary_key=True, serialize=False)),
                ('nickname', models.CharField(blank=True, max_length=255, null=True)),
                ('card_exp_datetime', models.DateTimeField()),
                ('merchant_payment_method_id', models.CharField(max_length=255)),
                ('subscriber', models.ForeignKey(db_column='subscriber_id', on_delete=django.db.models.deletion.CASCADE, related_name='payment_methods', to='app.subscriber')),
            ],
            options={
                'db_table': 'subscriber_payment_methods',
            },
        ),
        migrations.AddField(
            model_name='payment',
            name='payment_method',
            field=models.ForeignKey(db_column='subscriber_payment_method_id', on_delete=django.db.models.deletion.CASCADE, to='app.subscriberpaymentmethod'),
        ),
        migrations.CreateModel(
            name='SubscriberSMSLog',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('subscriber_sms_log_id', models.AutoField(primary_key=True, serialize=False)),
                ('sent_to', models.CharField(max_length=20)),
                ('success', models.BooleanField()),
                ('item', models.ForeignKey(db_column='sms_log_item_id', on_delete=django.db.models.deletion.CASCADE, to='app.smslogitem')),
                ('subscriber', models.ForeignKey(db_column='subscriber_id', on_delete=django.db.models.deletion.CASCADE, to='app.subscriber')),
            ],
            options={
                'db_table': 'subscriber_sms_log',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ticket_id', models.AutoField(primary_key=True, serialize=False)),
                ('opened_on', models.DateTimeField(auto_now_add=True)),
                ('reopened_on', models.DateTimeField(blank=True, null=True)),
                ('closed_on', models.DateTimeField(blank=True, null=True)),
                ('subscriber', models.ForeignKey(db_column='subscriber_id', on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to='app.subscriber')),
                ('user', models.ForeignKey(blank=True, db_column='user_id', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('ticket_category', models.ForeignKey(db_column='ticket_category_id', default=2, on_delete=django.db.models.deletion.PROTECT, to='app.ticketcategory')),
                ('ticket_status', models.ForeignKey(db_column='ticket_status_id', on_delete=django.db.models.deletion.PROTECT, to='app.ticketstatus')),
            ],
            options={
                'db_table': 'tickets',
                'ordering': ['-opened_on'],
            },
        ),
        migrations.CreateModel(
            name='ServiceChangeSchedule',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('service_change_schedule_id', models.AutoField(primary_key=True, serialize=False)),
                ('ssid_1', models.CharField(blank=True, max_length=255, null=True)),
                ('passkey_1', models.CharField(blank=True, max_length=255, null=True)),
                ('ssid_2', models.CharField(blank=True, max_length=255, null=True)),
                ('passkey_2', models.CharField(blank=True, max_length=255, null=True)),
                ('process_on', models.DateField()),
                ('processed', models.BooleanField(default=False)),
                ('canceled', models.BooleanField(default=False)),
                ('leasing_staff_red', models.ForeignKey(blank=True, db_column='leasing_staff_red_id', null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.leasingstaffred')),
                ('service_change_schedule_type', models.ForeignKey(db_column='service_change_schedule_type_id', on_delete=django.db.models.deletion.PROTECT, to='app.servicechangescheduletype')),
                ('service_plan', models.ForeignKey(db_column='service_plan_id', on_delete=django.db.models.deletion.PROTECT, to='app.serviceplan')),
                ('subscriber', models.ForeignKey(db_column='subscriber_id', on_delete=django.db.models.deletion.CASCADE, to='app.subscriber')),
                ('ticket_entry', models.ForeignKey(blank=True, db_column='ticket_entry_id', null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.ticket')),
            ],
            options={
                'db_table': 'service_change_schedule',
            },
        ),
        migrations.CreateModel(
            name='DispatchAppointment',
            fields=[
                ('dispatch_appointment_id', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateField()),
                ('notes', models.TextField(blank=True, null=True)),
                ('completion_notes', models.TextField(blank=True, null=True)),
                ('completed_on', models.DateTimeField(blank=True, null=True)),
                ('canceled_on', models.DateTimeField(blank=True, null=True)),
                ('wiring_certified', models.BooleanField(default=False)),
                ('wiring_repaired', models.BooleanField(default=False)),
                ('pte', models.BooleanField(default=False)),
                ('pets', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('canceled_by', models.ForeignKey(blank=True, db_column='canceled_by', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='canceled_appointments', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(db_column='created_by_id', on_delete=django.db.models.deletion.CASCADE, related_name='created_appointments', to=settings.AUTH_USER_MODEL)),
                ('technician', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='dispatches', to=settings.AUTH_USER_MODEL)),
                ('timeslot', models.ForeignKey(db_column='dispatch_appointment_timeslot_id', on_delete=django.db.models.deletion.CASCADE, to='app.dispatchappointmenttimeslot')),
                ('appointment_type', models.ForeignKey(db_column='dispatch_appointment_type_id', on_delete=django.db.models.deletion.CASCADE, to='app.dispatchappointmenttype')),
                ('ticket', models.ForeignKey(blank=True, db_column='ticket_id', null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.ticket')),
            ],
            options={
                'db_table': 'dispatch_appointments',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='TicketEntry',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ticket_entry_id', models.AutoField(primary_key=True, serialize=False)),
                ('description', models.TextField()),
                ('notes_private', models.TextField(blank=True, null=True)),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('submitted', models.BooleanField(default=False)),
                ('ticket', models.ForeignKey(db_column='ticket_id', on_delete=django.db.models.deletion.CASCADE, related_name='entries', to='app.ticket')),
                ('user', models.ForeignKey(blank=True, db_column='user_id', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'ticket_entry',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TicketEntryAction',
            fields=[
                ('ticket_entry_action_id', models.AutoField(primary_key=True, serialize=False)),
                ('ticket_entry', models.ForeignKey(db_column='ticket_entry_id', on_delete=django.db.models.deletion.CASCADE, related_name='actions', to='app.ticketentry')),
                ('type', models.ForeignKey(db_column='ticket_entry_action_type_id', on_delete=django.db.models.deletion.CASCADE, to='app.ticketentryactiontype')),
            ],
            options={
                'db_table': 'ticket_entry_action',
            },
        ),
        migrations.CreateModel(
            name='Uploads',
            fields=[
                ('upload_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('path', models.FileField(upload_to='uploads/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('circuit', models.ForeignKey(blank=True, db_column='circuit_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='uploads', to='app.circuit')),
                ('home', models.ForeignKey(blank=True, db_column='home_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='uploads', to='app.home')),
                ('project', models.ForeignKey(blank=True, db_column='project_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='uploads', to='app.project')),
                ('subscriber', models.ForeignKey(blank=True, db_column='subscriber_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='uploads', to='app.subscriber')),
                ('upload_type', models.ForeignKey(db_column='upload_type_id', on_delete=django.db.models.deletion.CASCADE, related_name='uploads', to='app.uploadtype')),
            ],
            options={
                'db_table': 'uploads',
            },
        ),
        migrations.CreateModel(
            name='UserPermissionSubcategory',
            fields=[
                ('user_permission_subcategory_id', models.AutoField(primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user_permission_category', models.ForeignKey(db_column='user_permission_category_id', on_delete=django.db.models.deletion.CASCADE, related_name='subcategories', to='app.userpermissioncategory')),
            ],
            options={
                'db_table': 'user_permission_subcategory',
            },
        ),
        migrations.CreateModel(
            name='UserPermissionType',
            fields=[
                ('user_permission_type_id', models.AutoField(primary_key=True, serialize=False)),
                ('identifier', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user_permission_category', models.ForeignKey(db_column='user_permission_category_id', on_delete=django.db.models.deletion.CASCADE, related_name='permission_types', to='app.userpermissioncategory')),
                ('user_permission_subcategory', models.ForeignKey(blank=True, db_column='user_permission_subcategory_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='permission_types', to='app.userpermissionsubcategory')),
            ],
            options={
                'db_table': 'user_permission_type',
            },
        ),
        migrations.CreateModel(
            name='UserPermissions',
            fields=[
                ('user_permission_id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(db_column='user_permissions', on_delete=django.db.models.deletion.CASCADE, related_name='custom_user_permissions', related_query_name='custom_user_permission', to=settings.AUTH_USER_MODEL)),
                ('user_permission_type', models.ForeignKey(db_column='user_permission_type_id', on_delete=django.db.models.deletion.CASCADE, related_name='user_permissions', to='app.userpermissiontype')),
            ],
            options={
                'db_table': 'user_permissions',
            },
        ),
        migrations.CreateModel(
            name='UserProjects',
            fields=[
                ('user_project_id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('project', models.ForeignKey(db_column='project_id', on_delete=django.db.models.deletion.CASCADE, related_name='user_projects', to='app.project')),
                ('user', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='user_projects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_projects',
            },
        ),
        migrations.CreateModel(
            name='UserPermissionDefaults',
            fields=[
                ('user_permission_defaults_id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user_permission_type', models.ForeignKey(db_column='user_permission_type_id', on_delete=django.db.models.deletion.CASCADE, related_name='permission_defaults', to='app.userpermissiontype')),
                ('user_role', models.ForeignKey(db_column='user_role_id', on_delete=django.db.models.deletion.CASCADE, related_name='permission_defaults', to='app.userroles')),
            ],
            options={
                'db_table': 'user_permission_defaults',
            },
        ),
        migrations.CreateModel(
            name='InterestFormLog',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('interest_form_log_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('address', models.TextField()),
                ('city', models.CharField(max_length=255)),
                ('zip_code', models.CharField(max_length=10)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(max_length=20)),
                ('message', models.TextField()),
                ('notes', models.TextField(blank=True, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('updated_by', models.ForeignKey(blank=True, db_column='updated_by_id', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('state', models.ForeignKey(db_column='state_id', on_delete=django.db.models.deletion.PROTECT, to='app.usstate')),
            ],
            options={
                'db_table': 'interest_form_log',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='home',
            name='us_state',
            field=models.OneToOneField(db_column='state_id', null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.usstate'),
        ),
        migrations.AddField(
            model_name='circuit',
            name='state',
            field=models.ForeignKey(db_column='state_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='circuits', to='app.usstate'),
        ),
        migrations.CreateModel(
            name='MultiHomeSubscriberHome',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('multi_home_subscriber_home_id', models.AutoField(primary_key=True, serialize=False)),
                ('home', models.ForeignKey(db_column='home_id', on_delete=django.db.models.deletion.CASCADE, to='app.home')),
                ('subscriber', models.ForeignKey(db_column='subscriber_id', on_delete=django.db.models.deletion.CASCADE, to='app.subscriber')),
            ],
            options={
                'db_table': 'multi_home_subscriber_homes',
                'unique_together': {('home', 'subscriber')},
            },
        ),
    ]
